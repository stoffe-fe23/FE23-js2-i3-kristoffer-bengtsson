{"mappings":"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","sources":["<anon>","src/main.ts","src/modules/Webshop.ts","src/modules/RestApi.ts","src/modules/utilities.ts"],"sourcesContent":["/*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    main.js\r\n    Main script of the fake webshop. Interface event handlers. \r\n*/ /*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    Webshop.js\r\n    Main class of the fake webshop. Fetch and display products. \r\n*/ /*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    RestApi.js\r\n    Class for making requests to a REST API using JSON data. \r\n*/ class $6b2c46a57cbfd4b0$export$2e2bcd8739ae039 {\n    // Set the base URL to access the api, and any default suffix (like \".json\" on Firebase)\n    // Each individual request method can then extend on the base url, and add query parameters. \n    constructor(baseUrl, urlSuffix = \"\"){\n        this.urlBase = baseUrl;\n        this.urlSuffix = urlSuffix;\n        this.lastRequest = {\n            url: null,\n            method: \"None\",\n            options: undefined\n        };\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send GET request to API\n    async getJson(urlPath = \"\", queryParams = null) {\n        const response = await fetch(this.buildRequestUrl(urlPath, queryParams));\n        const result = await response.json();\n        if (!response.ok) this.handleResponseErrors(response, result);\n        this.lastRequest.method = \"GET\";\n        this.lastRequest.options = undefined;\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send POST request to API\n    async postJson(urlPath = \"\", formData = null, queryParams = null) {\n        let response = await fetch(this.buildRequestUrl(urlPath, queryParams), this.getFetchOptions(\"POST\", formData ?? {}));\n        let result = await response.json();\n        if (!response.ok) this.handleResponseErrors(response, result);\n        this.lastRequest.method = \"POST\";\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send PATCH request to API\n    async updateJson(urlPath = \"\", formData = null, queryParams = null) {\n        let response = await fetch(this.buildRequestUrl(urlPath, queryParams), this.getFetchOptions(\"PATCH\", formData ?? {}));\n        let result = await response.json();\n        if (!response.ok) this.handleResponseErrors(response, result);\n        this.lastRequest.method = \"PATCH\";\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send DELETE request to API\n    async deleteJson(urlPath = \"\", formData = null, queryParams = null) {\n        let response = await fetch(this.buildRequestUrl(urlPath, queryParams), this.getFetchOptions(\"DELETE\", formData ?? {}));\n        let result = await response.json();\n        if (!response.ok) this.handleResponseErrors(response, result);\n        this.lastRequest.method = \"DELETE\";\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Repeat latest request, with optional modifications.\n    // If urlPath or queryParams is set they will override that existing value of the last request. \n    async repeatRequestJson(urlPath = \"\", queryParams = null) {\n        const response = await fetch(this.rebuildRequestUrl(urlPath, queryParams), this.lastRequest.options ?? {});\n        const result = await response.json();\n        if (!response.ok) this.handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Create a json-encoded object from a FormData object\n    formdataToJson(formData) {\n        var dataObject = {};\n        if (formData instanceof FormData) formData.forEach((value, key)=>{\n            // In case the remote api is type sensitive (like Firebase), convert to numbers and booleans from FormData strings \n            let currValue = value;\n            if (!isNaN(Number(value))) currValue = Number(value);\n            else if (value === \"true\" || value === \"false\") currValue = value === \"true\";\n            // Handle formdata with multiple value fields with the same name attribute (like SELECT tags \n            //  with the \"multiple\" attribute, checkbox groups etc)\n            if (!(key in dataObject)) dataObject[key] = currValue;\n            else {\n                if (!Array.isArray(dataObject[key])) dataObject[key] = [\n                    dataObject[key]\n                ];\n                dataObject[key].push(currValue);\n            }\n        });\n        return JSON.stringify(dataObject);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Assemble URL to send requests to.\n    buildRequestUrl(urlPath = \"\", queryParams = null) {\n        const url = new URL(`${this.urlBase}${urlPath.length ? \"/\" + urlPath : \"\"}${this.urlSuffix}`);\n        if (queryParams && Object.keys(queryParams).length > 0) for(const key in queryParams){\n            if (Array.isArray(queryParams[key])) for (const elem of queryParams[key])url.searchParams.append(key, elem);\n            else url.searchParams.append(key, queryParams[key]);\n        }\n        this.lastRequest.url = url;\n        return url;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Update and get last requested URL.\n    rebuildRequestUrl(urlPath = \"\", queryParams = null) {\n        if (!this.lastRequest.url) this.lastRequest.url = this.buildRequestUrl(urlPath, queryParams);\n        else {\n            if (urlPath.length > 0) this.lastRequest.url.pathname = `/${urlPath}${this.urlSuffix}`;\n            if (queryParams && Object.keys(queryParams).length > 0) {\n                for(const key in queryParams)if (Array.isArray(queryParams[key]) && queryParams[key].length > 0) {\n                    this.lastRequest.url.searchParams.set(key, queryParams[key][0]);\n                    for(let i = 1; i < queryParams[key].length; i++)this.lastRequest.url.searchParams.append(key, queryParams[key][i]);\n                } else this.lastRequest.url.searchParams.set(key, queryParams[key]);\n            }\n        }\n        return this.lastRequest.url;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Build options object for fetch() for submitting JSON data.\n    getFetchOptions(reqMethod, formData) {\n        const options = {\n            method: reqMethod,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)\n        };\n        this.lastRequest.options = options;\n        return options;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Handle error responses from the API requests\n    handleResponseErrors(response, result) {\n        this.lastRequest.url = null;\n        this.lastRequest.method = \"None\";\n        this.lastRequest.options = undefined;\n        if (response.status == 400) throw new $6b2c46a57cbfd4b0$export$f2e832acab1bdd79(response.status, `Bad request: ${result.error ?? \"\"}  (${response.statusText})`);\n        else if (response.status == 500) throw new $6b2c46a57cbfd4b0$export$f2e832acab1bdd79(response.status, `Server error: ${result.error ?? \"\"}  (${response.statusText})`);\n        else throw new $6b2c46a57cbfd4b0$export$f2e832acab1bdd79(response.status, `API Error: ${response.statusText}`);\n    }\n}\nclass $6b2c46a57cbfd4b0$export$f2e832acab1bdd79 extends Error {\n    constructor(errorCode, errorMessage){\n        super(errorMessage);\n        this.errorCode = errorCode;\n    }\n}\n\n\n/*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    utilities.js\r\n    My general utility functions module (trimmed down to only what is used here)\r\n*/ ///////////////////////////////////////////////////////////////////////////////\n// Create and return (or attach) a HTML element based on a template.\n//  - templateId is the ID of the <template> tag in the HTML file to use.\n//  - container is the parent element to insert the new element into.\n//  - values is an object where the key is a classname and value is the value\n//    to set as innerText/HTML of the matching element within the new object\n//    (or href for links, src for images, value for form fields)\nfunction $0cde2d9f4d30eec5$export$86b6f8925f11e682(templateId, container = null, values = {}, attributes = null, allowHTML = false) {\n    let newElement;\n    const template = document.getElementById(templateId);\n    if (template) {\n        newElement = template.content.firstElementChild.cloneNode(true);\n        for(const key in values){\n            const targetElement = newElement.querySelector(`.${key}`);\n            if (targetElement) switch(targetElement.tagName){\n                case \"IMG\":\n                    targetElement.src = values[key];\n                    break;\n                case \"A\":\n                    targetElement.href = values[key];\n                    break;\n                case \"TEXTAREA\":\n                case \"SELECT\":\n                case \"INPUT\":\n                    targetElement.value = values[key];\n                    break;\n                default:\n                    targetElement[allowHTML ? \"innerHTML\" : \"innerText\"] = values[key];\n                    break;\n            }\n        }\n        if (attributes) for(const key in attributes){\n            const attr = newElement.querySelector(`[${key}]`);\n            if (newElement.getAttribute(key)) newElement.setAttribute(key, attributes[key]);\n            else if (attr) attr.setAttribute(key, attributes[key]);\n        }\n        if (container) container.appendChild(newElement);\n    } else newElement = $0cde2d9f4d30eec5$export$ab2fe02786cfa43c(\"div\", `Template not found: ${templateId}`, container, \"error\");\n    return newElement;\n}\nfunction $0cde2d9f4d30eec5$export$ab2fe02786cfa43c(elementType, elementText, parentElement = null, elementClass = \"\", elementAttributes = null, allowHTML = false) {\n    let newElement = document.createElement(elementType);\n    elementType = elementType.toLowerCase();\n    if (elementAttributes && typeof elementAttributes == \"object\" && Object.keys(elementAttributes).length) for(const attributeName in elementAttributes)newElement.setAttribute(attributeName, elementAttributes[attributeName]);\n    $0cde2d9f4d30eec5$export$68a589e25833f984(newElement, elementClass);\n    if (elementText && elementText.length && Array.isArray(elementText)) {\n        // If type is a list and text is an array, build list items\n        if (elementType == \"ul\" || elementType == \"ol\") for (const listItemText of elementText){\n            const newListItem = document.createElement(\"li\");\n            newListItem[allowHTML ? \"innerHTML\" : \"innerText\"] = listItemText;\n            newElement.appendChild(newListItem);\n        }\n        else if (elementType == \"select\" || elementType == \"datalist\") for (const optionItemText of elementText){\n            const [optValue, optLabel, optGroup] = optionItemText.split(\"|\");\n            const newOptionItem = document.createElement(\"option\");\n            newOptionItem[allowHTML ? \"innerHTML\" : \"innerText\"] = optLabel ?? optValue;\n            newOptionItem.value = optValue;\n            if (optGroup !== undefined) {\n                let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\n                if (optionGroup === undefined || optionGroup === null) {\n                    optionGroup = document.createElement(\"optgroup\");\n                    optionGroup.label = optGroup;\n                    newElement.appendChild(optionGroup);\n                }\n                optionGroup.appendChild(newOptionItem);\n            } else newElement.appendChild(newOptionItem);\n        }\n        else newElement[allowHTML ? \"innerHTML\" : \"innerText\"] = elementText[0];\n    } else if (elementText && elementText.length) {\n        if (elementType == \"img\") newElement.alt = elementText;\n        else if (elementType == \"input\" && elementText.length > 0) {\n            const actualNewElement = newElement;\n            const newElementLabel = document.createElement(\"label\");\n            newElement = document.createElement(\"div\");\n            newElement.id = `${actualNewElement.id}-wrapper`;\n            if (elementClass.length > 0) newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\n            newElementLabel[allowHTML ? \"innerHTML\" : \"innerText\"] = elementText;\n            if (actualNewElement.getAttribute(\"type\") == \"radio\" || actualNewElement.getAttribute(\"type\") == \"checkbox\") {\n                newElementLabel.classList.add(`input-box-label`);\n                newElement.append(actualNewElement, newElementLabel);\n            } else newElement.append(newElementLabel, actualNewElement);\n        } else newElement[allowHTML ? \"innerHTML\" : \"innerText\"] = elementText;\n    }\n    if (parentElement !== undefined && parentElement !== null) parentElement.appendChild(newElement);\n    return newElement;\n}\nfunction $0cde2d9f4d30eec5$export$68a589e25833f984(targetElement, classesToAdd) {\n    if (targetElement !== undefined && targetElement !== null) {\n        if (classesToAdd.length > 0) {\n            if (Array.isArray(classesToAdd)) targetElement.classList.add(...classesToAdd);\n            else if (classesToAdd && classesToAdd.length) targetElement.classList.add(classesToAdd);\n        }\n    }\n}\nfunction $0cde2d9f4d30eec5$export$c7f61ab2130ff27a(selectElement, value, text = null) {\n    const option = document.createElement(\"option\");\n    option.value = value;\n    option.innerText = text ?? value.replace(\"-\", \" \");\n    selectElement.appendChild(option);\n}\nfunction $0cde2d9f4d30eec5$export$75a10b6d475fa3b3(score, scoreMax) {\n    const scoreBox = document.createElement(\"div\");\n    const scoreValueBox = document.createElement(\"span\");\n    for(let i = 1; i <= scoreMax; i++)scoreValueBox.appendChild($0cde2d9f4d30eec5$var$createRatingScoreElement(i, scoreMax, score));\n    scoreBox.appendChild(scoreValueBox);\n    return scoreBox;\n}\nfunction $0cde2d9f4d30eec5$var$createRatingScoreElement(currElement, maxElements, score) {\n    const newSVG = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    const newUse = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n    const scoreRounded = Math.max(Math.min(Math.round(score), maxElements), 0);\n    if (scoreRounded >= currElement) {\n        newSVG.classList.add(\"scored\");\n        if (currElement > score && score % 1 >= 0.5) newUse.setAttribute(\"mask\", \"url(#halfscore)\");\n    }\n    newSVG.classList.add(\"points\");\n    newUse.setAttribute(\"href\", \"#points-image\");\n    newSVG.appendChild(newUse);\n    return newSVG;\n}\n\n\nclass $d12c69fb21ccda24$export$2e2bcd8739ae039 {\n    constructor(apiUrl, resultsPerPage = 20){\n        this.api = new (0, $6b2c46a57cbfd4b0$export$2e2bcd8739ae039)(apiUrl);\n        this.pageSize = resultsPerPage;\n        this.currentResult = {\n            products: [],\n            total: 0,\n            skip: 0,\n            limit: 0\n        };\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    async loadCategories(catSelect) {\n        if (catSelect) {\n            const categories = await this.api.getJson(\"products/categories\");\n            categories.sort((a, b)=>a.localeCompare(b));\n            catSelect.innerHTML = \"\";\n            $0cde2d9f4d30eec5$export$c7f61ab2130ff27a(catSelect, \"\", \"- All categories -\");\n            for (const category of categories)$0cde2d9f4d30eec5$export$c7f61ab2130ff27a(catSelect, category);\n        }\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    async getProducts(nameFilter = \"\", resultPage = 0) {\n        const queryParams = {\n            q: nameFilter,\n            limit: this.pageSize.toString(),\n            skip: (this.pageSize * resultPage).toString()\n        };\n        const response = await this.api.getJson(nameFilter.length ? \"products/search\" : \"products\", queryParams);\n        this.currentResult = response;\n        this.showResultNav(response.products.length < response.total);\n        this.displayProducts(response);\n        return response;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    async getProductsByCategory(categoryFilter = \"\", resultPage = 0) {\n        const queryParams = {\n            limit: this.pageSize.toString(),\n            skip: (this.pageSize * resultPage).toString()\n        };\n        const response = await this.api.getJson(categoryFilter.length ? `products/category/${categoryFilter}` : `products`, queryParams);\n        this.currentResult = response;\n        this.showResultNav(response.products.length < response.total);\n        this.displayProducts(response);\n        return response;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    async getProductsPage(pageType, pageNum = 0) {\n        let resultPage = Math.ceil(this.currentResult.skip / this.pageSize);\n        const maxPage = Math.ceil(this.currentResult.total / this.pageSize);\n        if (pageNum && pageNum <= maxPage && pageType == \"page\") resultPage = pageNum - 1;\n        else switch(pageType){\n            case \"prev\":\n                resultPage = resultPage - 1 >= 0 ? resultPage - 1 : 1;\n                break;\n            case \"next\":\n                resultPage = resultPage + 1 < maxPage ? resultPage + 1 : maxPage;\n                break;\n            case \"first\":\n                resultPage = 0;\n                break;\n            case \"last\":\n                resultPage = maxPage - 1;\n                break;\n        }\n        const queryParams = {\n            skip: (this.pageSize * resultPage).toString()\n        };\n        const response = await this.api.repeatRequestJson(\"\", queryParams);\n        this.currentResult = response;\n        this.showResultNav(response.products.length < response.total);\n        this.displayProducts(response);\n        return response;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    displayProducts(productData) {\n        const productsBox = document.querySelector(\"#productlist\");\n        const summaryBox = document.querySelector(\"#search-summary\");\n        if (summaryBox) {\n            summaryBox.innerText = `Found ${productData.total} product${productData.total != 1 ? \"s\" : \"\"}.`;\n            if (productData.total > productData.products.length) {\n                const bounds = this.currentResult.skip + this.pageSize > productData.total ? productData.total : this.currentResult.skip + this.pageSize;\n                summaryBox.innerText += ` Showing ${this.currentResult.skip + 1} to ${bounds}`;\n            }\n        }\n        if (productsBox) {\n            productsBox.innerHTML = \"\";\n            if (productData.total > 0 && productData.products.length > 0) for (const product of productData.products){\n                const card = $0cde2d9f4d30eec5$export$86b6f8925f11e682(\"tpl-product-card\", productsBox, product, {\n                    \"data-productid\": product.id.toString()\n                });\n                card.addEventListener(\"click\", this.onProductClick.bind(this));\n                card.querySelector(\".rating\").prepend($0cde2d9f4d30eec5$export$75a10b6d475fa3b3(product.rating, 5));\n                card.querySelector(\"form\").addEventListener(\"submit\", this.onPurchaseSubmit.bind(this));\n                if (product.stock < 10) card.querySelector(\".stock\").classList.add(\"alert\");\n            }\n            else $0cde2d9f4d30eec5$export$ab2fe02786cfa43c(\"div\", \"No products found.\", productsBox, \"products-none\");\n        }\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    showResultNav(isMultiplePages) {\n        const pageNav = document.querySelector(\"#pages-nav\");\n        if (isMultiplePages) {\n            const resultPage = Math.ceil(this.currentResult.skip / this.pageSize) + 1;\n            const maxPage = Math.ceil(this.currentResult.total / this.pageSize);\n            pageNav.querySelector(\"#pages-nav-goto\").innerHTML = `Page ${resultPage} / ${maxPage}`;\n            pageNav.querySelector(\"#pages-nav-first\").disabled = resultPage <= 1;\n            pageNav.querySelector(\"#pages-nav-prev\").disabled = resultPage <= 1;\n            pageNav.querySelector(\"#pages-nav-next\").disabled = resultPage == maxPage;\n            pageNav.querySelector(\"#pages-nav-last\").disabled = resultPage == maxPage;\n            pageNav.classList.add(\"show\");\n        } else pageNav.classList.remove(\"show\");\n    }\n}\n\n\nconst $ad2bcec7a0192558$var$shop = new (0, $d12c69fb21ccda24$export$2e2bcd8739ae039)(\"https://dummyjson.com\");\n$ad2bcec7a0192558$var$shop.onProductClick = $ad2bcec7a0192558$var$onProductClick;\n$ad2bcec7a0192558$var$shop.onPurchaseSubmit = $ad2bcec7a0192558$var$onPurchaseSubmit;\n$ad2bcec7a0192558$var$shop.loadCategories(document.querySelector(\"#search-category\"));\n$ad2bcec7a0192558$var$shop.getProducts();\ndocument.querySelector(\"#categoryform\").addEventListener(\"submit\", $ad2bcec7a0192558$var$onCategorySubmit);\ndocument.querySelector(\"#searchform\").addEventListener(\"submit\", $ad2bcec7a0192558$var$onSearchSubmit);\ndocument.querySelector(\"#pages-nav\").addEventListener(\"submit\", $ad2bcec7a0192558$var$onResultPageNav);\ndocument.querySelector(\"#pages-goto-form\").addEventListener(\"submit\", $ad2bcec7a0192558$var$onGotoPageSubmit);\ndocument.querySelector(\"#search-product\").addEventListener(\"click\", (event)=>event.currentTarget.select());\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Event handler for the category filter form\nfunction $ad2bcec7a0192558$var$onCategorySubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    $ad2bcec7a0192558$var$shop.getProductsByCategory(formData.get(\"category\") ?? \"\");\n    document.querySelector(\"#search-product\").value = \"\";\n    event.currentTarget.querySelector(\"button\").blur();\n}\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Event handler for the search filter form\nfunction $ad2bcec7a0192558$var$onSearchSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    $ad2bcec7a0192558$var$shop.getProducts(formData.get(\"product\") ?? \"\");\n    document.querySelector(\"#search-category\").value = \"\";\n    event.currentTarget.querySelector(\"button\").blur();\n}\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Event handler for the buy product forms\nfunction $ad2bcec7a0192558$var$onPurchaseSubmit(event) {\n    event.preventDefault();\n    const productId = event.currentTarget.closest(\"article\").dataset.productid;\n    const formData = new FormData(event.currentTarget);\n    console.log(\"Buying! \", productId, formData.get(\"quantity\"));\n    event.currentTarget.reset();\n    event.currentTarget.querySelector(\"input\").blur();\n    event.currentTarget.querySelector(\"button\").blur();\n}\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Highlight its buy quantity field when clicking a product card\nfunction $ad2bcec7a0192558$var$onProductClick(event) {\n    const qtyField = event.currentTarget.querySelector(\"form input\");\n    const buyButton = event.currentTarget.querySelector(\"form button\");\n    if (event.target != buyButton) {\n        qtyField.focus();\n        qtyField.select();\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////\n// Event handler for the product results page navigation form\nfunction $ad2bcec7a0192558$var$onResultPageNav(event) {\n    event.preventDefault();\n    switch(event.submitter.id){\n        case \"pages-nav-prev\":\n            $ad2bcec7a0192558$var$shop.getProductsPage(\"prev\");\n            break;\n        case \"pages-nav-next\":\n            $ad2bcec7a0192558$var$shop.getProductsPage(\"next\");\n            break;\n        case \"pages-nav-first\":\n            $ad2bcec7a0192558$var$shop.getProductsPage(\"first\");\n            break;\n        case \"pages-nav-last\":\n            $ad2bcec7a0192558$var$shop.getProductsPage(\"last\");\n            break;\n        case \"pages-nav-goto\":\n            const pageInput = document.querySelector(\"#pages-goto-page\");\n            pageInput.setAttribute(\"max\", Math.ceil($ad2bcec7a0192558$var$shop.currentResult.total / $ad2bcec7a0192558$var$shop.pageSize).toString());\n            pageInput.value = Math.ceil($ad2bcec7a0192558$var$shop.currentResult.skip / $ad2bcec7a0192558$var$shop.pageSize + 1).toString();\n            pageInput.select();\n            document.querySelector(\"#pages-goto-dialog\").showModal();\n            break;\n    }\n    event.submitter.blur();\n}\n//////////////////////////////////////////////////////////////////////////////////////////////\nfunction $ad2bcec7a0192558$var$onGotoPageSubmit(event) {\n    event.preventDefault();\n    const dialog = event.currentTarget.closest(\"dialog\");\n    const pageInput = Number(document.querySelector(\"#pages-goto-page\").value);\n    if (!isNaN(pageInput) && pageInput > 0 && pageInput <= Math.ceil($ad2bcec7a0192558$var$shop.currentResult.total / $ad2bcec7a0192558$var$shop.pageSize)) $ad2bcec7a0192558$var$shop.getProductsPage(\"page\", pageInput);\n    if (dialog) dialog.close();\n}\n\n\n//# sourceMappingURL=index.3c0d6a85.js.map\n","/*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    main.js\r\n    Main script of the fake webshop. Interface event handlers. \r\n*/\r\nimport Webshop from './modules/Webshop.ts';\r\n\r\nconst shop = new Webshop('https://dummyjson.com');\r\nshop.onProductClick = onProductClick;\r\nshop.onPurchaseSubmit = onPurchaseSubmit;\r\nshop.loadCategories(document.querySelector(\"#search-category\") as HTMLSelectElement);\r\nshop.getProducts();\r\n\r\n(document.querySelector(\"#categoryform\") as HTMLFormElement).addEventListener(\"submit\", onCategorySubmit);\r\n(document.querySelector(\"#searchform\") as HTMLFormElement).addEventListener(\"submit\", onSearchSubmit);\r\n(document.querySelector(\"#pages-nav\") as HTMLFormElement).addEventListener(\"submit\", onResultPageNav);\r\n(document.querySelector(\"#pages-goto-form\") as HTMLFormElement).addEventListener(\"submit\", onGotoPageSubmit);\r\n(document.querySelector(\"#search-product\") as HTMLInputElement).addEventListener(\"click\", (event) => (event.currentTarget as HTMLInputElement).select());\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Event handler for the category filter form\r\nfunction onCategorySubmit(event) {\r\n    event.preventDefault();\r\n    const formData: FormData = new FormData(event.currentTarget);\r\n    shop.getProductsByCategory(formData.get(\"category\") as string ?? \"\");\r\n\r\n    (document.querySelector(\"#search-product\") as HTMLInputElement).value = \"\";\r\n    event.currentTarget.querySelector(\"button\").blur();\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Event handler for the search filter form\r\nfunction onSearchSubmit(event) {\r\n    event.preventDefault();\r\n    const formData: FormData = new FormData(event.currentTarget);\r\n    shop.getProducts(formData.get(\"product\") as string ?? \"\");\r\n\r\n    (document.querySelector(\"#search-category\") as HTMLSelectElement).value = \"\";\r\n    event.currentTarget.querySelector(\"button\").blur();\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Event handler for the buy product forms\r\nfunction onPurchaseSubmit(event) {\r\n    event.preventDefault();\r\n    const productId: string = event.currentTarget.closest(\"article\").dataset.productid;\r\n    const formData: FormData = new FormData(event.currentTarget);\r\n\r\n    console.log(\"Buying! \", productId, formData.get(\"quantity\"));\r\n    event.currentTarget.reset();\r\n    event.currentTarget.querySelector(\"input\").blur();\r\n    event.currentTarget.querySelector(\"button\").blur();\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Highlight its buy quantity field when clicking a product card\r\nfunction onProductClick(event) {\r\n    const qtyField = event.currentTarget.querySelector(\"form input\");\r\n    const buyButton = event.currentTarget.querySelector(\"form button\");\r\n\r\n    if (event.target != buyButton) {\r\n        qtyField.focus();\r\n        qtyField.select();\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\n// Event handler for the product results page navigation form\r\nfunction onResultPageNav(event) {\r\n    event.preventDefault();\r\n    switch (event.submitter.id) {\r\n        case \"pages-nav-prev\": shop.getProductsPage('prev'); break;\r\n        case \"pages-nav-next\": shop.getProductsPage('next'); break;\r\n        case \"pages-nav-first\": shop.getProductsPage('first'); break;\r\n        case \"pages-nav-last\": shop.getProductsPage('last'); break;\r\n        case \"pages-nav-goto\": // Show popup dialog for navigating to page\r\n            const pageInput = document.querySelector(\"#pages-goto-page\") as HTMLInputElement;\r\n            pageInput.setAttribute(\"max\", Math.ceil(shop.currentResult.total / shop.pageSize).toString());\r\n            pageInput.value = Math.ceil((shop.currentResult.skip / shop.pageSize) + 1).toString();\r\n            pageInput.select();\r\n            (document.querySelector(\"#pages-goto-dialog\") as HTMLDialogElement).showModal();\r\n            break;\r\n    }\r\n    event.submitter.blur();\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\nfunction onGotoPageSubmit(event) {\r\n    event.preventDefault();\r\n    const dialog = event.currentTarget.closest(\"dialog\");\r\n    const pageInput: number = Number((document.querySelector(\"#pages-goto-page\") as HTMLInputElement).value);\r\n\r\n    if (!isNaN(pageInput) && (pageInput > 0) && (pageInput <= Math.ceil(shop.currentResult.total / shop.pageSize))) {\r\n        shop.getProductsPage('page', pageInput);\r\n    }\r\n\r\n    if (dialog) {\r\n        dialog.close();\r\n    }\r\n}","/*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    Webshop.js\r\n    Main class of the fake webshop. Fetch and display products. \r\n*/\r\nimport RestApi from './RestApi.ts';\r\nimport * as utilities from './utilities.ts';\r\nimport { APIQueryParams, ProductsResult } from './TypeDefinitions.ts';\r\n\r\n// const shop = new Webshop('https://dummyjson.com');\r\n\r\nexport default class Webshop {\r\n    private api: RestApi;\r\n    public readonly pageSize: number;\r\n    public currentResult: ProductsResult;\r\n    public onPurchaseSubmit: Function;\r\n    public onProductClick: Function;\r\n\r\n    constructor(apiUrl: string, resultsPerPage: number = 20) {\r\n        this.api = new RestApi(apiUrl);\r\n        this.pageSize = resultsPerPage;\r\n        this.currentResult = {\r\n            products: [],\r\n            total: 0,\r\n            skip: 0,\r\n            limit: 0\r\n        };\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    public async loadCategories(catSelect: HTMLSelectElement): Promise<void> {\r\n        if (catSelect) {\r\n            const categories: string[] = await this.api.getJson(\"products/categories\");\r\n\r\n            categories.sort((a: string, b: string) => a.localeCompare(b));\r\n\r\n            catSelect.innerHTML = \"\";\r\n            utilities.addSelectOption(catSelect, \"\", \"- All categories -\");\r\n            for (const category of categories) {\r\n                utilities.addSelectOption(catSelect, category);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    public async getProducts(nameFilter: string = '', resultPage: number = 0): Promise<ProductsResult> {\r\n        const queryParams: APIQueryParams = {\r\n            q: nameFilter,\r\n            limit: this.pageSize.toString(),\r\n            skip: (this.pageSize * resultPage).toString()\r\n        }\r\n\r\n        const response: ProductsResult = await this.api.getJson(nameFilter.length ? \"products/search\" : \"products\", queryParams);\r\n        this.currentResult = response;\r\n        this.showResultNav(response.products.length < response.total);\r\n        this.displayProducts(response);\r\n        return response;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    public async getProductsByCategory(categoryFilter: string = '', resultPage: number = 0): Promise<ProductsResult> {\r\n        const queryParams: APIQueryParams = {\r\n            limit: this.pageSize.toString(),\r\n            skip: (this.pageSize * resultPage).toString()\r\n        }\r\n\r\n        const response: ProductsResult = await this.api.getJson(categoryFilter.length ? `products/category/${categoryFilter}` : `products`, queryParams);\r\n        this.currentResult = response;\r\n        this.showResultNav(response.products.length < response.total);\r\n        this.displayProducts(response);\r\n        return response;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    public async getProductsPage(pageType: 'prev' | 'next' | 'first' | 'last' | 'page', pageNum: number = 0): Promise<ProductsResult> {\r\n        let resultPage = Math.ceil(this.currentResult.skip / this.pageSize);\r\n        const maxPage = Math.ceil(this.currentResult.total / this.pageSize);\r\n\r\n        if (pageNum && (pageNum <= maxPage) && (pageType == 'page')) {\r\n            resultPage = (pageNum - 1);\r\n        }\r\n        else {\r\n            switch (pageType) {\r\n                case 'prev': resultPage = (resultPage - 1 >= 0 ? resultPage - 1 : 1); break;\r\n                case 'next': resultPage = (resultPage + 1 < maxPage ? resultPage + 1 : maxPage); break;\r\n                case 'first': resultPage = 0; break;\r\n                case 'last': resultPage = maxPage - 1; break;\r\n            }\r\n        }\r\n\r\n        const queryParams = { skip: (this.pageSize * resultPage).toString() }\r\n        const response: ProductsResult = await this.api.repeatRequestJson('', queryParams);\r\n\r\n        this.currentResult = response;\r\n        this.showResultNav(response.products.length < response.total);\r\n        this.displayProducts(response);\r\n        return response;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    public displayProducts(productData: ProductsResult) {\r\n        const productsBox = document.querySelector(\"#productlist\") as HTMLElement;\r\n        const summaryBox = document.querySelector(\"#search-summary\") as HTMLDivElement;\r\n\r\n        if (summaryBox) {\r\n            summaryBox.innerText = `Found ${productData.total} product${productData.total != 1 ? \"s\" : \"\"}.`;\r\n            if (productData.total > productData.products.length) {\r\n                const bounds = (this.currentResult.skip + this.pageSize > productData.total ? productData.total : this.currentResult.skip + this.pageSize);\r\n                summaryBox.innerText += ` Showing ${this.currentResult.skip + 1} to ${bounds}`;\r\n            }\r\n        }\r\n        if (productsBox) {\r\n            productsBox.innerHTML = \"\";\r\n            if ((productData.total > 0) && (productData.products.length > 0)) {\r\n                for (const product of productData.products) {\r\n                    const card = utilities.createHTMLFromTemplate(\"tpl-product-card\", productsBox, product, { \"data-productid\": product.id.toString() });\r\n                    card.addEventListener(\"click\", this.onProductClick.bind(this));\r\n                    card.querySelector(\".rating\")!.prepend(utilities.createRatingScoreDisplay(product.rating, 5));\r\n                    card.querySelector(\"form\")!.addEventListener(\"submit\", this.onPurchaseSubmit.bind(this));\r\n                    if (product.stock < 10) {\r\n                        card.querySelector(\".stock\")!.classList.add(\"alert\");\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                utilities.createHTMLElement(\"div\", \"No products found.\", productsBox, 'products-none');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    public showResultNav(isMultiplePages: boolean): void {\r\n        const pageNav = document.querySelector(\"#pages-nav\") as HTMLFormElement;\r\n        if (isMultiplePages) {\r\n            const resultPage = Math.ceil(this.currentResult.skip / this.pageSize) + 1;\r\n            const maxPage = Math.ceil(this.currentResult.total / this.pageSize);\r\n\r\n            (pageNav.querySelector(\"#pages-nav-goto\") as HTMLButtonElement).innerHTML = `Page ${resultPage} / ${maxPage}`;\r\n            (pageNav.querySelector(\"#pages-nav-first\") as HTMLButtonElement).disabled = (resultPage <= 1);\r\n            (pageNav.querySelector(\"#pages-nav-prev\") as HTMLButtonElement).disabled = (resultPage <= 1);\r\n            (pageNav.querySelector(\"#pages-nav-next\") as HTMLButtonElement).disabled = (resultPage == maxPage);\r\n            (pageNav.querySelector(\"#pages-nav-last\") as HTMLButtonElement).disabled = (resultPage == maxPage);\r\n\r\n            pageNav.classList.add(\"show\");\r\n        }\r\n        else {\r\n            pageNav.classList.remove(\"show\");\r\n        }\r\n    }\r\n}\r\n","/*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    RestApi.js\r\n    Class for making requests to a REST API using JSON data. \r\n*/\r\nimport { APIQueryParams, APIQueryValue, APIQueryData, APILastRequest } from './TypeDefinitions.ts';\r\n\r\n\r\nexport default class RestApi {\r\n    private readonly urlBase: string;\r\n    private readonly urlSuffix: string;\r\n    private lastRequest: APILastRequest;\r\n\r\n    // Set the base URL to access the api, and any default suffix (like \".json\" on Firebase)\r\n    // Each individual request method can then extend on the base url, and add query parameters. \r\n    constructor(baseUrl: string, urlSuffix: string = \"\") {\r\n        this.urlBase = baseUrl;\r\n        this.urlSuffix = urlSuffix;\r\n        this.lastRequest = {\r\n            url: null,\r\n            method: \"None\",\r\n            options: undefined\r\n        };\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send GET request to API\r\n    async getJson<Type>(urlPath: string = '', queryParams: APIQueryParams = null): Promise<Type> {\r\n        const response = await fetch(this.buildRequestUrl(urlPath, queryParams));\r\n        const result = await response.json();\r\n        if (!response.ok) {\r\n            this.handleResponseErrors(response, result);\r\n        }\r\n        this.lastRequest.method = 'GET';\r\n        this.lastRequest.options = undefined;\r\n        return result as Type;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send POST request to API\r\n    async postJson<Type>(urlPath: string = '', formData: APIQueryData = null, queryParams: APIQueryParams = null): Promise<Type> {\r\n        let response = await fetch(this.buildRequestUrl(urlPath, queryParams), this.getFetchOptions(\"POST\", formData ?? {}));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.handleResponseErrors(response, result);\r\n        }\r\n        this.lastRequest.method = 'POST';\r\n        return result as Type;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send PATCH request to API\r\n    async updateJson<Type>(urlPath: string = '', formData: APIQueryData = null, queryParams: APIQueryParams = null): Promise<Type> {\r\n        let response = await fetch(this.buildRequestUrl(urlPath, queryParams), this.getFetchOptions(\"PATCH\", formData ?? {}));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.handleResponseErrors(response, result);\r\n        }\r\n        this.lastRequest.method = 'PATCH';\r\n        return result as Type;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send DELETE request to API\r\n    async deleteJson<Type>(urlPath: string = '', formData: APIQueryData = null, queryParams: APIQueryParams = null): Promise<Type> {\r\n        let response = await fetch(this.buildRequestUrl(urlPath, queryParams), this.getFetchOptions(\"DELETE\", formData ?? {}));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.handleResponseErrors(response, result);\r\n        }\r\n        this.lastRequest.method = 'DELETE';\r\n        return result as Type;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Repeat latest request, with optional modifications.\r\n    // If urlPath or queryParams is set they will override that existing value of the last request. \r\n    async repeatRequestJson<Type>(urlPath: string = '', queryParams: APIQueryParams = null): Promise<Type> {\r\n        const response = await fetch(this.rebuildRequestUrl(urlPath, queryParams), this.lastRequest.options ?? {});\r\n        const result = await response.json();\r\n        if (!response.ok) {\r\n            this.handleResponseErrors(response, result);\r\n        }\r\n        return result as Type;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Create a json-encoded object from a FormData object\r\n    formdataToJson(formData: FormData): string {\r\n        var dataObject = {};\r\n        if (formData instanceof FormData) {\r\n            formData.forEach((value, key) => {\r\n                // In case the remote api is type sensitive (like Firebase), convert to numbers and booleans from FormData strings \r\n                let currValue: APIQueryValue = value as string;\r\n                if (!isNaN(Number(value))) {\r\n                    currValue = Number(value as string);\r\n                }\r\n                else if ((value === \"true\") || (value === \"false\")) {\r\n                    currValue = (value === \"true\");\r\n                }\r\n\r\n                // Handle formdata with multiple value fields with the same name attribute (like SELECT tags \r\n                //  with the \"multiple\" attribute, checkbox groups etc)\r\n                if (!(key in dataObject)) {\r\n                    dataObject[key] = currValue;\r\n                }\r\n                else {\r\n                    if (!Array.isArray(dataObject[key])) {\r\n                        dataObject[key] = [dataObject[key]];\r\n                    }\r\n                    dataObject[key].push(currValue);\r\n                }\r\n            });\r\n        }\r\n        return JSON.stringify(dataObject);\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Assemble URL to send requests to.\r\n    private buildRequestUrl(urlPath: string = '', queryParams: APIQueryParams = null): URL {\r\n        const url: URL = new URL(`${this.urlBase}${urlPath.length ? \"/\" + urlPath : \"\"}${this.urlSuffix}`);\r\n        if (queryParams && (Object.keys(queryParams).length > 0)) {\r\n            for (const key in queryParams) {\r\n                if (Array.isArray(queryParams[key])) {\r\n                    for (const elem of queryParams[key]) {\r\n                        url.searchParams.append(key, elem);\r\n                    }\r\n                }\r\n                else {\r\n                    url.searchParams.append(key, queryParams[key] as string);\r\n                }\r\n            }\r\n        }\r\n        this.lastRequest.url = url;\r\n        return url;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Update and get last requested URL.\r\n    private rebuildRequestUrl(urlPath: string = '', queryParams: APIQueryParams = null): URL {\r\n        if (!this.lastRequest.url) {\r\n            this.lastRequest.url = this.buildRequestUrl(urlPath, queryParams);\r\n        }\r\n        else {\r\n            if (urlPath.length > 0) {\r\n                this.lastRequest.url.pathname = `/${urlPath}${this.urlSuffix}`;\r\n            }\r\n\r\n            if (queryParams && (Object.keys(queryParams).length > 0)) {\r\n                for (const key in queryParams) {\r\n                    if (Array.isArray(queryParams[key]) && (queryParams[key].length > 0)) {\r\n                        this.lastRequest.url.searchParams.set(key, queryParams[key][0]);\r\n                        for (let i = 1; i < queryParams[key].length; i++) {\r\n                            this.lastRequest.url.searchParams.append(key, queryParams[key][i]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.lastRequest.url.searchParams.set(key, queryParams[key] as string);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.lastRequest.url;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Build options object for fetch() for submitting JSON data.\r\n    private getFetchOptions(reqMethod: string, formData: APIQueryData): RequestInit {\r\n        const options: RequestInit = {\r\n            method: reqMethod,\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: (formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)),\r\n        };\r\n        this.lastRequest.options = options;\r\n        return options;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Handle error responses from the API requests\r\n    private handleResponseErrors(response: Response, result: any): void {\r\n        this.lastRequest.url = null;\r\n        this.lastRequest.method = \"None\";\r\n        this.lastRequest.options = undefined;\r\n\r\n        if ((response.status == 400)) {\r\n            throw new ApiError(response.status, `Bad request: ${result.error ?? \"\"}  (${response.statusText})`);\r\n        }\r\n        // Server errors - show the error message from API\r\n        else if (response.status == 500) {\r\n            throw new ApiError(response.status, `Server error: ${result.error ?? \"\"}  (${response.statusText})`);\r\n        }\r\n        // Other errors - show request status message\r\n        else {\r\n            throw new ApiError(response.status, `API Error: ${response.statusText}`);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Exception class for keeping response/error codes separate from the message text.\r\nexport class ApiError extends Error {\r\n    public readonly errorCode: number;\r\n\r\n    constructor(errorCode: number, errorMessage: string) {\r\n        super(errorMessage);\r\n        this.errorCode = errorCode;\r\n    }\r\n}","/*\r\n    Dummy Webshop - Inlämningsuppgift 3 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    utilities.js\r\n    My general utility functions module (trimmed down to only what is used here)\r\n*/\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Create and return (or attach) a HTML element based on a template.\r\n//  - templateId is the ID of the <template> tag in the HTML file to use.\r\n//  - container is the parent element to insert the new element into.\r\n//  - values is an object where the key is a classname and value is the value\r\n//    to set as innerText/HTML of the matching element within the new object\r\n//    (or href for links, src for images, value for form fields)\r\nexport function createHTMLFromTemplate(templateId: string, container: HTMLElement | null = null, values: Record<string, string | number | boolean> = {}, attributes: Record<string, string> | null = null, allowHTML: boolean = false): HTMLElement {\r\n    let newElement: HTMLElement;\r\n    const template = document.getElementById(templateId) as HTMLTemplateElement;\r\n\r\n    if (template) {\r\n        newElement = template.content.firstElementChild!.cloneNode(true) as HTMLElement;\r\n\r\n        for (const key in values) {\r\n            const targetElement = newElement.querySelector(`.${key}`);\r\n            if (targetElement) {\r\n                switch (targetElement.tagName) {\r\n                    case \"IMG\": (targetElement as HTMLImageElement).src = values[key] as string; break;\r\n                    case \"A\": (targetElement as HTMLAnchorElement).href = values[key] as string; break;\r\n                    case \"TEXTAREA\":\r\n                    case \"SELECT\":\r\n                    case \"INPUT\": (targetElement as HTMLInputElement).value = values[key] as string; break;\r\n                    default: targetElement[allowHTML ? \"innerHTML\" : \"innerText\"] = values[key] as string; break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (attributes) {\r\n            for (const key in attributes) {\r\n                const attr = newElement.querySelector(`[${key}]`);\r\n                if (newElement.getAttribute(key)) {\r\n                    newElement.setAttribute(key, attributes[key]);\r\n                }\r\n                else if (attr) {\r\n                    attr.setAttribute(key, attributes[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            container.appendChild(newElement);\r\n        }\r\n    }\r\n    else {\r\n        newElement = createHTMLElement(\"div\", `Template not found: ${templateId}`, container, 'error');\r\n    }\r\n\r\n    return newElement;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Oneliner to create and return a new DOM element with content, optionally appending it to a parent element.\r\n//  * elementText can either be a string holding the content of the tag or the ALT of an img tag, or an array of strings \r\n//    containing the listitems/options for UL, OL, SELECT and DATALIST tags. In the case of SELECT/DATALIST the strings \r\n//    can also be formated like: SELECT: value|textlabel|optgroup      DATALIST: value|textlabel\r\n//  * elementClass can be a string or an array of strings holding CSS class(es) to apply to the element. \r\n//  * The elementAttributes parameter can be an object with a property for each attribute to set on the HTML element. \r\n// Function returns the newly created DOM element (or its wrapper element if a wrapper is created).\r\n// Remember: Set CSS \"white-space: pre-wrap;\" on element if allowHTML is true and newlines still should displayed like with innerText. \r\nexport function createHTMLElement(elementType: string, elementText: string | string[], parentElement: HTMLElement | null = null, elementClass: string | string[] = '', elementAttributes: Record<string, string> | null = null, allowHTML: boolean = false): HTMLElement {\r\n    let newElement = document.createElement(elementType);\r\n\r\n    elementType = elementType.toLowerCase();\r\n\r\n    if (elementAttributes && (typeof elementAttributes == \"object\") && Object.keys(elementAttributes).length) {\r\n        for (const attributeName in elementAttributes) {\r\n            newElement.setAttribute(attributeName, elementAttributes[attributeName]);\r\n        }\r\n    }\r\n    addClassToElement(newElement, elementClass);\r\n\r\n    if (elementText && elementText.length && Array.isArray(elementText)) {\r\n        // If type is a list and text is an array, build list items\r\n        if ((elementType == 'ul') || (elementType == 'ol')) {\r\n            for (const listItemText of elementText) {\r\n                const newListItem = document.createElement(\"li\");\r\n                newListItem[allowHTML ? \"innerHTML\" : \"innerText\"] = listItemText;\r\n                newElement.appendChild(newListItem);\r\n            }\r\n        }\r\n        // If type is a select form element and text is an array, build select option list\r\n        else if ((elementType == 'select') || (elementType == 'datalist')) {\r\n            for (const optionItemText of elementText) {\r\n                const [optValue, optLabel, optGroup] = optionItemText.split('|');\r\n                const newOptionItem = document.createElement(\"option\");\r\n\r\n                newOptionItem[allowHTML ? \"innerHTML\" : \"innerText\"] = (optLabel ?? optValue);\r\n                newOptionItem.value = optValue;\r\n\r\n                if (optGroup !== undefined) {\r\n                    let optionGroup: HTMLOptGroupElement | null = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\r\n                    if ((optionGroup === undefined) || (optionGroup === null)) {\r\n                        optionGroup = document.createElement(\"optgroup\");\r\n                        optionGroup.label = optGroup;\r\n                        newElement.appendChild(optionGroup);\r\n                    }\r\n                    optionGroup.appendChild(newOptionItem);\r\n                }\r\n                else {\r\n                    newElement.appendChild(newOptionItem);\r\n                }\r\n            }\r\n        }\r\n        // Array but not a list-type element, just use the first string \r\n        else {\r\n            newElement[allowHTML ? \"innerHTML\" : \"innerText\"] = elementText[0];\r\n        }\r\n    }\r\n    else if (elementText && elementText.length) {\r\n        if (elementType == 'img') {\r\n            (newElement as HTMLImageElement).alt = elementText as string;\r\n        }\r\n        // Special case for input fields, create wrapper and labels for them.\r\n        else if ((elementType == 'input') && (elementText.length > 0)) {\r\n            const actualNewElement = newElement;\r\n            const newElementLabel = document.createElement(\"label\");\r\n            newElement = document.createElement(\"div\");\r\n            newElement.id = `${actualNewElement.id}-wrapper`;\r\n            if (elementClass.length > 0) {\r\n                newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\r\n            }\r\n\r\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\r\n            newElementLabel[allowHTML ? \"innerHTML\" : \"innerText\"] = elementText as string;\r\n\r\n            if ((actualNewElement.getAttribute(\"type\") == \"radio\") || (actualNewElement.getAttribute(\"type\") == \"checkbox\")) {\r\n                newElementLabel.classList.add(`input-box-label`);\r\n                newElement.append(actualNewElement, newElementLabel);\r\n            }\r\n            else {\r\n                newElement.append(newElementLabel, actualNewElement);\r\n            }\r\n        }\r\n        else {\r\n            newElement[allowHTML ? \"innerHTML\" : \"innerText\"] = elementText as string;\r\n        }\r\n    }\r\n\r\n    if ((parentElement !== undefined) && (parentElement !== null)) {\r\n        parentElement.appendChild(newElement);\r\n    }\r\n    return newElement;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Add CSS class(es) to a DOM element\r\nexport function addClassToElement(targetElement: HTMLElement, classesToAdd: string | string[]): void {\r\n    if ((targetElement !== undefined) && (targetElement !== null)) {\r\n        if (classesToAdd.length > 0) {\r\n            if (Array.isArray(classesToAdd)) {\r\n                targetElement.classList.add(...classesToAdd);\r\n            }\r\n            else if (classesToAdd && classesToAdd.length) {\r\n                targetElement.classList.add(classesToAdd);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function addSelectOption(selectElement: HTMLSelectElement, value: string, text: string | null = null): void {\r\n    const option = document.createElement(\"option\");\r\n    option.value = value;\r\n    option.innerText = (text ?? value.replace(\"-\", \" \"));\r\n    selectElement.appendChild(option);\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Build a rating display with stars from a rating value\r\nexport function createRatingScoreDisplay(score: number, scoreMax: number): HTMLElement {\r\n    const scoreBox = document.createElement(\"div\");\r\n    const scoreValueBox = document.createElement(\"span\");\r\n\r\n    for (let i = 1; i <= scoreMax; i++) {\r\n        scoreValueBox.appendChild(createRatingScoreElement(i, scoreMax, score));\r\n    }\r\n    scoreBox.appendChild(scoreValueBox);\r\n    return scoreBox;\r\n}\r\n\r\nfunction createRatingScoreElement(currElement: number, maxElements: number, score: number): SVGSVGElement {\r\n    const newSVG = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n    const newUse = document.createElementNS('http://www.w3.org/2000/svg', 'use');\r\n    const scoreRounded: number = Math.max(Math.min(Math.round(score), maxElements), 0);\r\n\r\n    if (scoreRounded >= currElement) {\r\n        newSVG.classList.add(\"scored\");\r\n        if ((currElement > score) && ((score % 1) >= 0.5)) {\r\n            newUse.setAttribute(\"mask\", \"url(#halfscore)\");\r\n        }\r\n    }\r\n\r\n    newSVG.classList.add(\"points\");\r\n    newUse.setAttribute(\"href\", \"#points-image\");\r\n    newSVG.appendChild(newUse);\r\n    return newSVG;\r\n}"],"names":["$6b2c46a57cbfd4b0$export$2e2bcd8739ae039","constructor","baseUrl","urlSuffix","urlBase","lastRequest","url","method","options","undefined","getJson","urlPath","queryParams","response","fetch","buildRequestUrl","result","json","ok","handleResponseErrors","postJson","formData","getFetchOptions","updateJson","deleteJson","repeatRequestJson","rebuildRequestUrl","formdataToJson","dataObject","FormData","forEach","value","key","currValue","isNaN","Number","Array","isArray","push","JSON","stringify","URL","length","Object","keys","elem","searchParams","append","pathname","set","i","reqMethod","headers","body","status","$6b2c46a57cbfd4b0$export$f2e832acab1bdd79","error","statusText","Error","errorCode","errorMessage","$0cde2d9f4d30eec5$export$ab2fe02786cfa43c","elementType","elementText","parentElement","elementClass","elementAttributes","allowHTML","targetElement","newElement","document","createElement","toLowerCase","attributeName","setAttribute","classesToAdd","classList","add","listItemText","newListItem","appendChild","optionItemText","optValue","optLabel","optGroup","split","newOptionItem","optionGroup","querySelector","label","alt","actualNewElement","newElementLabel","id","getAttribute","$0cde2d9f4d30eec5$export$c7f61ab2130ff27a","selectElement","text","option","innerText","replace","$ad2bcec7a0192558$var$shop","apiUrl","resultsPerPage","api","pageSize","currentResult","products","total","skip","limit","loadCategories","catSelect","categories","category","sort","a","b","localeCompare","innerHTML","getProducts","nameFilter","resultPage","q","toString","showResultNav","displayProducts","getProductsByCategory","categoryFilter","getProductsPage","pageType","pageNum","Math","ceil","maxPage","productData","productsBox","summaryBox","bounds","product","card","$0cde2d9f4d30eec5$export$86b6f8925f11e682","templateId","container","values","attributes","template","getElementById","content","firstElementChild","cloneNode","tagName","src","href","attr","addEventListener","onProductClick","bind","prepend","$0cde2d9f4d30eec5$export$75a10b6d475fa3b3","score","scoreMax","scoreBox","scoreValueBox","$0cde2d9f4d30eec5$var$createRatingScoreElement","currElement","maxElements","newSVG","createElementNS","newUse","max","min","round","rating","onPurchaseSubmit","stock","isMultiplePages","pageNav","disabled","remove","event","qtyField","currentTarget","buyButton","target","focus","select","preventDefault","console","log","closest","dataset","productid","get","reset","blur","submitter","pageInput","showModal","dialog","close"],"version":3,"file":"index.3c0d6a85.js.map"}